Simple Questions:

1. SELECT MEMBER_ID, MEMBER_NAME, CITY, MEMBERSHIP_STATUS 
FROM LMS_MEMBERS 
WHERE MEMBERSHIP_STATUS = 'Permanent';


2.SELECT b.BOOK_CODE, b.PUBLICATION, b.PRICE, s.SUPPLIER_NAME 
FROM LMS_BOOK_DETAILS b JOIN LMS_SUPPLIERS_DETAILS s 
ON b.SUPPLIER_ID = s.SUPPLIER_ID 
WHERE b.BOOK_CODE = (SELECT BOOK_CODE FROM LMS_BOOK_ISSUE GROUP BY BOOK_CODE ORDER BY COUNT(BOOK_ISSUE_NO) DESC LIMIT 1);

3.SELECT DISTINCT m.MEMBER_ID, m.MEMBER_NAME 
FROM LMS_BOOK_ISSUE I JOIN LMS_MEMBERS m 
ON i.MEMBER_ID = m.MEMBER_ID
WHERE i.BOOK_CODE = 'BL000002';

4.SELECT BOOK_CODE, BOOK_TITLE, AUTHOR 
FROM LMS_BOOK_DETAILS 
WHERE AUTHOR LIKE 'P%';

5.SELECT COUNT(*) AS NO_OF_BOOKS FROM LMS_BOOK_DETAILS 
WHERE CATEGORY = 'JAVA';

6.SELECT CATEGORY, COUNT(*) AS NO_OF_BOOKS 
FROM LMS_BOOK_DETAILS GROUP BY CATEGORY;

7.SELECT COUNT(*) AS NO_OF_BOOKS 
FROM LMS_BOOK_DETAILS 
WHERE PUBLICATION = 'Prentice Hall';

8.SELECT BOOK_CODE, BOOK_TITLE 
FROM LMS_BOOK_DETAILS b JOIN LMS_BOOK_ISSUE i 
ON b.BOOK_CODE = i.BOOK_CODE
WHERE i.DATE_ISSUE = '2012-04-01';

9.SELECT MEMBER_ID, MEMBER_NAME, DATE_REGISTER, DATE_EXPIRE 
FROM LMS_MEMBERS WHERE DATE_EXPIRE < '2013-04-01';

10.SELECT MEMBER_ID, MEMBER_NAME, DATE_REGISTER, MEMBERSHIP_STATUS 
FROM LMS_MEMBERS WHERE DATE_REGISTER < '2012-03-01' AND MEMBERSHIP_STATUS = 'Temporary';

11.SELECT MEMBER_ID, CONCAT(UPPER(SUBSTRING(MEMBER_NAME, 1, 1)), LOWER(SUBSTRING(MEMBER_NAME, 2)))
AS Name FROM LMS_MEMBERS
WHERE CITY IN ('CHENNAI', 'DELHI');

12.SELECT DISTINCT CONCAT(BOOK_TITLE, '_is_written_by_', AUTHOR) 
AS BOOK_WRITTEN_BY FROM LMS_BOOK_DETAILS;

13.SELECT AVG(PRICE) AS AVERAGEPRICE FROM LMS_BOOK_DETAILS 
WHERE CATEGORY = 'JAVA';

14.SELECT SUPPLIER_ID, SUPPLIER_NAME, EMAIL FROM LMS_SUPPLIERS_DETAILS 
WHERE EMAIL LIKE '%@gmail.com';

15.SELECT SUPPLIER_ID, SUPPLIER_NAME, COALESCE(CAST(CONTACT AS CHAR), EMAIL, ADDRESS) 
AS CONTACTDETAILS
FROM LMS_SUPPLIERS_DETAILS;

16.SELECT SUPPLIER_ID, SUPPLIER_NAME, IF(ISNULL(CONTACT), 'No', 'Yes') AS PHONENUMAVAILABLE FROM LMS_SUPPLIERS_DETAILS;

17.SELECT m.MEMBER_ID, m.MEMBER_NAME, m.CITY, m.MEMBERSHIP_STATUS, SUM(f.FINE_AMOUNT) AS Fine 
FROM LMS_BOOK_ISSUE I JOIN LMS_FINE_DETAILS f ON i.FINE_RANGE = f.FINE_RANGE JOIN LMS_MEMBERS m ON i.MEMBER_ID = m.MEMBER_ID GROUP BY m.MEMBER_ID; 

Average Questions:

 1.SELECT m.MEMBER_ID, m.MEMBER_NAME, b.BOOK_CODE, b.BOOK_TITLE 
FROM LMS_BOOK_ISSUE I JOIN LMS_MEMBERS m ON i.MEMBER_ID = m.MEMBER_ID JOIN LMS_BOOK_DETAILS b ON i.BOOK_CODE = b.BOOK_CODE;

2.SELECT COUNT(*) AS NO_OF_BOOKS_AVAILABLE 
FROM LMS_BOOK_DETAILS 
WHERE BOOK_CODE NOT IN (SELECT BOOK_CODE FROM LMS_BOOK_ISSUE);

3.SELECT m.MEMBER_ID, m.MEMBER_NAME, f.FINE_RANGE, f.FINE_AMOUNT
FROM LMS_BOOK_ISSUE i
JOIN LMS_FINE_DETAILS f ON i.FINE_RANGE = f.FINE_RANGE
JOIN LMS_MEMBERS m ON i.MEMBER_ID = m.MEMBER_ID
WHERE f.FINE_AMOUNT < 100;

4.SELECT BOOK_CODE, BOOK_TITLE, PUBLICATION, BOOK_EDITION, PRICE, PUBLISH_DATE
FROM LMS_BOOK_DETAILS
ORDER BY PUBLISH_DATE, PUBLICATION, BOOK_EDITION;

5.SELECT BOOK_CODE, BOOK_TITLE, RACK_NUM
FROM LMS_BOOK_DETAILS
WHERE RACK_NUM = 'A1'
ORDER BY BOOK_TITLE;

6.SELECT m.MEMBER_ID, m.MEMBER_NAME, i.DATE_ISSUE, i.DATE_RETURN, i.DATE_RETURNED
FROM LMS_BOOK_ISSUE i
JOIN LMS_MEMBERS m ON i.MEMBER_ID = m.MEMBER_ID
WHERE i.DATE_RETURNED > i.DATE_RETURN;

7.SELECT m.MEMBER_ID, m.MEMBER_NAME
FROM LMS_MEMBERS m
WHERE m.MEMBER_ID NOT IN (SELECT DISTINCT MEMBER_ID FROM LMS_BOOK_ISSUE);

8.SELECT m.MEMBER_ID, m.MEMBER_NAME
FROM LMS_MEMBERS m
LEFT JOIN LMS_BOOK_ISSUE i ON m.MEMBER_ID = i.MEMBER_ID
LEFT JOIN LMS_FINE_DETAILS f ON i.FINE_RANGE = f.FINE_RANGE
WHERE (f.FINE_AMOUNT IS NULL) AND YEAR(i.DATE_ISSUE) = 2012;

9.SELECT DATE_ISSUE, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_ISSUE
GROUP BY DATE_ISSUE
ORDER BY NOOFBOOKS DESC
LIMIT 1;

10.SELECT b.BOOK_TITLE, b.SUPPLIER_ID
FROM LMS_BOOK_DETAILS b
WHERE b.AUTHOR = 'Herbert Schildt' AND b.BOOK_EDITION = 5 AND b.SUPPLIER_ID = 'S01';

11.SELECT RACK_NUM, COUNT(*) AS NOOFBOOKS
FROM LMS_BOOK_DETAILS
GROUP BY RACK_NUM
ORDER BY RACK_NUM;


12.SELECT i.BOOK_ISSUE_NO, m.MEMBER_NAME, m.DATE_REGISTER, m.DATE_EXPIRE, 
b.BOOK_TITLE, b.CATEGORY, b.AUTHOR, b.PRICE, 
i.DATE_ISSUE, i.DATE_RETURN, i.DATE_RETURNED, 
IF(i.DATE_RETURNED > i.DATE_RETURN, 'Late', 'On Time') AS ISSUE_STATUS, 
f.FINE_AMOUNT
FROM LMS_BOOK_ISSUE i
JOIN LMS_MEMBERS m ON i.MEMBER_ID = m.MEMBER_ID
JOIN LMS_BOOK_DETAILS b ON i.BOOK_CODE = b.BOOK_CODE
LEFT JOIN LMS_FINE_DETAILS f ON i.FINE_RANGE = f.FINE_RANGE;

13.SELECT BOOK_CODE, BOOK_TITLE, PUBLISH_DATE
FROM LMS_BOOK_DETAILS
WHERE MONTH(PUBLISH_DATE) = 12;

14.SELECT b.BOOK_CODE, b.BOOK_TITLE, s.SUPPLIER_NAME, b.PRICE
FROM LMS_BOOK_DETAILS b
JOIN LMS_SUPPLIERS_DETAILS s ON b.SUPPLIER_ID = s.SUPPLIER_ID
WHERE b.PRICE = (SELECT MAX(PRICE) FROM LMS_BOOK_DETAILS WHERE SUPPLIER_ID = b.SUPPLIER_ID);

15.SELECT BOOK_CODE, BOOK_TITLE, TIMESTAMPDIFF(YEAR, PUBLISH_DATE, CURDATE()) AS BOOK_AGE
FROM LMS_BOOK_DETAILS
ORDER BY BOOK_AGE DESC;

Complex Questions:

1.SELECT b.BOOK_CODE, b.BOOK_TITLE, s.SUPPLIER_NAME
FROM LMS_BOOK_DETAILS b
JOIN LMS_SUPPLIERS_DETAILS s ON b.SUPPLIER_ID = s.SUPPLIER_ID
WHERE b.SUPPLIER_ID = (
    SELECT SUPPLIER_ID
    FROM LMS_BOOK_DETAILS
    GROUP BY SUPPLIER_ID
    ORDER BY COUNT(BOOK_CODE) DESC
    LIMIT 1
);

2.SELECT m.MEMBER_ID, m.MEMBER_NAME, 3 - COUNT(i.BOOK_CODE) AS REMAININGBOOKS
FROM LMS_MEMBERS m
LEFT JOIN LMS_BOOK_ISSUE i ON m.MEMBER_ID = i.MEMBER_ID
GROUP BY m.MEMBER_ID;

3.SELECT s.SUPPLIER_ID, s.SUPPLIER_NAME
FROM LMS_SUPPLIERS_DETAILS s
JOIN LMS_BOOK_DETAILS b ON s.SUPPLIER_ID = b.SUPPLIER_ID
GROUP BY s.SUPPLIER_ID
ORDER BY COUNT(b.BOOK_CODE)
LIMIT 1;































 






